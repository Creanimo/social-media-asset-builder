{
  "version": 3,
  "sources": ["../../src/exports/extensions/attachment.ts", "../../src/internal/selection-to-insertion-end.ts"],
  "sourcesContent": ["import {\n  AttachmentManager,\n  AttachmentManagerAttributes,\n} from \"../attachment-manager.js\";\nimport { LOADING_STATES } from \"../elements/attachment-editor.js\";\nimport type { LoadingState } from \"../elements/attachment-editor.js\";\nimport { CommandProps, mergeAttributes, Node } from \"@tiptap/core\";\nimport { selectionToInsertionEnd } from \"../../internal/selection-to-insertion-end.js\";\nimport { Maybe } from \"../../types\";\nimport { findAttribute } from \"./find-attribute.js\";\nimport { toDefaultCaption } from \"../../internal/to-default-caption.js\";\nimport { fileUploadErrorMessage, captionPlaceholder } from \"../translations.js\";\nimport {\n  findChildrenByType,\n  findParentNodeOfTypeClosestToPos,\n} from \"prosemirror-utils\";\nimport { AttachmentRemoveEvent } from \"../events/attachment-remove-event.js\";\n\nimport { render, html } from \"lit/html.js\";\nimport { unsafeHTML } from \"lit/directives/unsafe-html.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport {\n  EditorState,\n  NodeSelection,\n  Plugin,\n  PluginKey,\n  TextSelection,\n  Transaction,\n} from \"@tiptap/pm/state\";\nimport {\n  DOMSerializer,\n  Node as ProseMirrorNode,\n  ResolvedPos,\n} from \"@tiptap/pm/model\";\n\ninterface AttachmentAttrs extends AttachmentManagerAttributes {\n  loadingState: LoadingState;\n  previewable: boolean;\n  progress: number;\n\n  // Image\n  width?: Maybe<number>;\n  height?: Maybe<number>;\n\n  [key: string]: unknown;\n}\n\nexport interface AttachmentOptions {\n  HTMLAttributes: Record<string, any>;\n  fileUploadErrorMessage: string;\n  captionPlaceholder: string;\n  previewable: boolean;\n}\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    attachment: {\n      /**\n       * Add an attachment(s)\n       */\n      setAttachment: (\n        options: AttachmentManager | AttachmentManager[],\n      ) => ReturnType;\n\n      /**\n       * Allows you to insert an attachment at a location within TipTap\n       */\n      setAttachmentAtCoords: (\n        options: AttachmentManager | AttachmentManager[],\n        coordinates: { top: number; left: number },\n      ) => ReturnType;\n    };\n  }\n}\n\nexport const figureTypes = [\n  \"previewable-attachment-figure\",\n  \"attachment-figure\",\n];\n\n/**\n * This is a special case where it exists as:\n * figure[\"data-trix-attachment\"][\"contentType\"] and\n * action-text-attachment[\"content-type\"]\n */\nfunction parseContentTypeFromElement(element: HTMLElement) {\n  return (\n    findAttribute(element, \"content-type\") ||\n    JSON.parse(element.getAttribute(\"data-trix-attachment\") || \"{}\")\n      .contentType ||\n    \"application/octet-stream\"\n  );\n}\n\nconst canParseAttachment = (\n  node: HTMLElement | string,\n  shouldPreview: boolean,\n) => {\n  if (node instanceof HTMLElement) {\n    const contentType = parseContentTypeFromElement(node);\n\n    if (contentType === \"application/octet-stream\") {\n      return false;\n    }\n\n    // For <action-text-attachment>\n    const actionTextAttachment = node.closest(\"action-text-attachment\");\n    if (actionTextAttachment) {\n      const previewable =\n        actionTextAttachment.getAttribute(\"previewable\") === \"true\";\n\n      if (!actionTextAttachment.getAttribute(\"sgid\")) {\n        return false;\n      }\n\n      if (previewable === shouldPreview) {\n        return true;\n      }\n\n      return false;\n    }\n\n    const previewable = canPreview(\n      findAttribute(node, \"previewable\"),\n      findAttribute(node, \"contentType\"),\n    );\n\n    if (previewable === shouldPreview) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * This appends to the current HTML of the <figcaption> into node.attrs.caption.\n * This is how a figcaption knows if it's empty and is important for ActionText.\n */\nfunction handleCaptions(\n  node: ProseMirrorNode,\n  tr: Transaction,\n  newState: EditorState,\n  pos: number,\n) {\n  let modified = false;\n\n  if (figureTypes.includes(node.type.name) === false) return modified;\n\n  // @see https://discuss.prosemirror.net/t/saving-content-containing-dom-generated-by-nodeview/2594/5\n  let scratch = document.createElement(\"div\");\n  scratch.appendChild(\n    DOMSerializer.fromSchema(newState.schema).serializeNode(node),\n  );\n\n  const figcaption = scratch.querySelector(\"figcaption\");\n\n  if (figcaption == null) return modified;\n\n  const caption = figcaption.innerHTML;\n  if (node.attrs.caption !== caption) {\n    tr.setNodeMarkup(pos, undefined, {\n      ...node.attrs,\n      caption,\n    });\n    modified = true;\n  }\n\n  return modified;\n}\n\nfunction canPreview(previewable: boolean, contentType: Maybe<string>): boolean {\n  return Boolean(\n    previewable || AttachmentManager.isPreviewable(contentType || \"\"),\n  );\n}\n\nfunction toExtension(fileName: Maybe<string>): string {\n  if (!fileName) return \"\";\n\n  return \"attachment--\" + fileName.match(/\\.(\\w+)$/)?.[1].toLowerCase();\n}\n\nfunction toType(content: Maybe<string>, previewable: Boolean): string {\n  if (previewable) {\n    return \"attachment--preview\";\n  }\n\n  if (content) {\n    return \"attachment--content\";\n  }\n\n  return \"attachment--file\";\n}\n\nexport const Attachment = Node.create<AttachmentOptions>({\n  name: \"attachment-figure\",\n  group: \"block attachmentFigure\",\n  content: \"inline*\",\n  selectable: true,\n  draggable: true,\n  isolating: true,\n  defining: true,\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey(\"rhino-attachment-fixer\"),\n        appendTransaction(_transactions, _oldState, newState) {\n          const tr = newState.tr;\n          let modified = false;\n\n          // @TODO: Iterate through transactions instead of descendants (?).\n          newState.doc.descendants((node, pos, _parent) => {\n            const mutations = [handleCaptions(node, tr, newState, pos)];\n\n            const shouldModify = mutations.some((bool) => bool === true);\n\n            if (shouldModify) {\n              modified = true;\n            }\n          });\n\n          if (modified) return tr;\n\n          return undefined;\n        },\n      }),\n      new Plugin({\n        key: new PluginKey(\"rhino-prevent-unintended-figcaption-behavior\"),\n        props: {\n          handlePaste: (view, event) => {\n            const name = view.state.selection.$anchor.parent.type.name;\n\n            const { clipboardData } = event;\n\n            if (!clipboardData) return false;\n\n            if (figureTypes.includes(name)) {\n              event.preventDefault();\n              const tr = view.state.tr;\n              // @TODO: Ideally we don't need to do this. This prevents inserting unnecessary <p> tags in the figcaption\n              // causing things to get fubar and <p> to get inserted in a bizarre place.\n              const text = clipboardData.getData(\"text/plain\");\n              tr.insertText(text);\n              view.dispatch(tr);\n              return true;\n            }\n            return false;\n          },\n          handleKeyDown: (view, event) => {\n            /**\n             * This is a hack. When we have an empty figcaption and you press \"Enter\" or \"Backspace\" you delete the\n             * containing gallery.\n             */\n            if ([\"Backspace\", \"Enter\"].includes(event.key)) {\n              const name = view.state.selection.$head.parent.type.name;\n              const content = view.state.selection.$head.parent.textContent;\n\n              if (view.state.selection.to !== view.state.selection.from) {\n                return false;\n              }\n\n              if (figureTypes.includes(name) && content === \"\") {\n                event.preventDefault();\n                return true;\n              }\n            }\n\n            return false;\n          },\n        },\n      }),\n      new Plugin({\n        key: new PluginKey(\"rhino-attachment-remove-event\"),\n        view() {\n          type FindNodeResult = ReturnType<typeof findChildrenByType>;\n          type FindNodeResultObj = FindNodeResult[keyof FindNodeResult];\n\n          const afterSgidsAndAttachmentIds = new Map<\n            string,\n            FindNodeResultObj\n          >();\n\n          return {\n            update(view, prevState) {\n              const nodeTypes = [\n                view.state.schema.nodes[\"previewable-attachment-figure\"],\n                view.state.schema.nodes[\"attachment-figure\"],\n              ];\n\n              nodeTypes.forEach((nodeType) => {\n                const attachmentNodesBefore = findChildrenByType(\n                  prevState.doc,\n                  nodeType,\n                );\n\n                // attachmentNodesAfter state transform\n                findChildrenByType(view.state.doc, nodeType).forEach((node) => {\n                  const nodeAttrs = node.node\n                    .attrs as AttachmentManagerAttributes;\n                  const sgid = nodeAttrs.sgid;\n                  const attachmentId = nodeAttrs.attachmentId;\n\n                  if (sgid) {\n                    afterSgidsAndAttachmentIds.set(sgid, node);\n                  }\n\n                  if (attachmentId) {\n                    afterSgidsAndAttachmentIds.set(attachmentId, node);\n                  }\n                });\n\n                attachmentNodesBefore.forEach((node) => {\n                  const nodeAttrs = node.node\n                    .attrs as AttachmentManagerAttributes;\n\n                  const { sgid, attachmentId } = nodeAttrs;\n\n                  if (sgid && afterSgidsAndAttachmentIds.has(sgid)) return;\n                  if (\n                    attachmentId &&\n                    afterSgidsAndAttachmentIds.has(attachmentId)\n                  )\n                    return;\n\n                  const attachmentManager = new AttachmentManager(\n                    nodeAttrs,\n                    view,\n                  );\n\n                  view.dom.dispatchEvent(\n                    new AttachmentRemoveEvent(attachmentManager),\n                  );\n                });\n\n                afterSgidsAndAttachmentIds.clear();\n              });\n            },\n          };\n        },\n      }),\n    ];\n  },\n  addOptions() {\n    return {\n      HTMLAttributes: {\n        class: \"attachment\",\n      },\n      fileUploadErrorMessage: fileUploadErrorMessage,\n      captionPlaceholder: captionPlaceholder,\n      previewable: false,\n    };\n  },\n\n  parseHTML() {\n    return [\n      // When it's <figure data-trix-attachment> its coming from `to_trix_html`\n      {\n        tag: \"figure[data-trix-attachment]\",\n        getAttrs: (node) => {\n          const isValid = canParseAttachment(node, this.options.previewable);\n\n          if (!isValid) {\n            return false;\n          }\n\n          return null;\n        },\n      },\n      // When it's .attachment, its coming from <action-text-attachment><figure></figure></action-text-attachment> its the raw HTML.\n      {\n        tag: \"action-text-attachment > figure.attachment\",\n        contentElement: \"figcaption\",\n        getAttrs: (node) => {\n          const isValid = canParseAttachment(node, this.options.previewable);\n\n          if (!isValid) {\n            return false;\n          }\n\n          return null;\n        },\n      },\n      {\n        tag: \"action-text-attachment\",\n        getAttrs: (node) => {\n          const isValid = canParseAttachment(node, this.options.previewable);\n\n          if (!isValid) {\n            return false;\n          }\n\n          return null;\n        },\n      },\n    ];\n  },\n\n  renderHTML({ node }) {\n    const {\n      // Figure\n      content,\n      contentType,\n      sgid,\n      fileName,\n      fileSize,\n      caption,\n      url,\n      previewable,\n\n      // Image\n      src,\n      width,\n      height,\n    } = node.attrs as AttachmentAttrs;\n\n    const attachmentAttrs = {\n      caption,\n      contentType,\n      content,\n      filename: fileName,\n      filesize: fileSize,\n      height,\n      width,\n      sgid,\n      url,\n      src,\n    };\n\n    const figure = [\n      \"figure\",\n      mergeAttributes(this.options.HTMLAttributes, {\n        class:\n          this.options.HTMLAttributes.class +\n          \" \" +\n          toType(content, canPreview(previewable, contentType)) +\n          \" \" +\n          toExtension(fileName),\n        \"data-trix-content-type\": contentType,\n        \"data-trix-attachment\": JSON.stringify(attachmentAttrs),\n        \"data-trix-attributes\": JSON.stringify({\n          caption,\n          ...(canPreview(previewable, contentType)\n            ? { presentation: \"gallery\" }\n            : {}),\n        }),\n      }),\n    ] as const;\n\n    const figcaption = [\n      \"figcaption\",\n      mergeAttributes(\n        {},\n        { class: \"attachment__caption attachment__caption--edited\" },\n      ),\n      0,\n    ] as const;\n\n    const image = [\n      \"img\",\n      mergeAttributes(\n        {},\n        {\n          src: url || src,\n          contenteditable: false,\n          width,\n          height,\n        },\n      ),\n    ];\n\n    if (!content && canPreview(previewable, contentType)) {\n      return [...figure, image, figcaption];\n    }\n\n    return [...figure, figcaption];\n  },\n\n  addAttributes() {\n    return {\n      attachmentId: { default: null },\n      caption: {\n        default: \"\",\n        parseHTML: (element) => {\n          return (\n            element.querySelector(\"figcaption\")?.innerHTML ||\n            findAttribute(element, \"caption\")\n          );\n        },\n      },\n      progress: {\n        default: 0,\n        parseHTML: (element) => {\n          return findAttribute(element, \"sgid\") ||\n            findAttribute(element, \"content\") ||\n            element.closest(\"action-text-attachment\")?.innerHTML\n            ? 100\n            : 0;\n        },\n      },\n      loadingState: {\n        default: LOADING_STATES.notStarted,\n        parseHTML: (element) =>\n          findAttribute(element, \"sgid\")\n            ? LOADING_STATES.success\n            : LOADING_STATES.notStarted,\n      },\n      sgid: {\n        default: \"\",\n        parseHTML: (element) => findAttribute(element, \"sgid\"),\n      },\n      src: {\n        default: \"\",\n        parseHTML: (element) => findAttribute(element, \"src\"),\n      },\n      height: {\n        default: \"\",\n        parseHTML: (element) => findAttribute(element, \"height\"),\n      },\n      width: {\n        default: \"\",\n        parseHTML: (element) => {\n          return findAttribute(element, \"width\");\n        },\n      },\n      contentType: {\n        default: \"\",\n        parseHTML: (element) => {\n          return parseContentTypeFromElement(element);\n        },\n      },\n      fileName: {\n        default: \"\",\n        parseHTML: (element) => findAttribute(element, \"filename\"),\n      },\n      fileSize: {\n        default: \"\",\n        parseHTML: (element) => findAttribute(element, \"filesize\"),\n      },\n      content: {\n        default: \"\",\n        parseHTML: (element) => {\n          const attachment = element.closest(\"action-text-attachment\");\n\n          let content = \"\";\n\n          if (attachment) {\n            const domParser = new DOMParser();\n            const parsedDom = domParser.parseFromString(\n              attachment.innerHTML,\n              \"text/html\",\n            );\n\n            const firstChild = parsedDom.body.firstElementChild;\n\n            if (firstChild) {\n              if (\n                firstChild.tagName.toLowerCase() !== \"figure\" ||\n                !firstChild.classList.contains(\"attachment\")\n              ) {\n                content = attachment.innerHTML;\n              }\n            }\n          }\n\n          return content || findAttribute(element, \"content\");\n        },\n      },\n      url: {\n        default: \"\",\n        parseHTML: (element) => {\n          return findAttribute(element, \"url\");\n        },\n      },\n      previewable: {\n        default: false,\n        parseHTML: (element) => {\n          let { previewable } = JSON.parse(\n            element.getAttribute(\"data-trix-attachment\") || \"{}\",\n          );\n\n          if (previewable == null) {\n            previewable = findAttribute(element, \"previewable\");\n          }\n\n          return previewable;\n        },\n      },\n    };\n  },\n\n  addNodeView() {\n    return ({ node, getPos, editor }) => {\n      const {\n        content,\n        contentType,\n        sgid,\n        fileName,\n        progress,\n        fileSize,\n        url,\n        src,\n        width,\n        height,\n        caption,\n        previewable,\n        loadingState,\n      } = node.attrs as AttachmentAttrs;\n\n      const trixAttachment = JSON.stringify({\n        contentType,\n        content,\n        filename: fileName,\n        filesize: fileSize,\n        height,\n        width,\n        sgid,\n        url,\n        caption,\n      });\n\n      const isPreviewable = canPreview(previewable, contentType);\n\n      const trixAttributes = JSON.stringify({\n        ...(isPreviewable ? { presentation: \"gallery\" } : {}),\n        caption,\n      });\n\n      const figureClasses = `\n        ${this.options.HTMLAttributes.class}\n        ${toType(content, canPreview(previewable, contentType))}\n        ${toExtension(fileName)}\n      `;\n\n      function handleFigureClick(e: Event) {\n        const target = e.currentTarget as HTMLElement;\n        const figcaption = target.querySelector(\"figcaption\");\n\n        if (figcaption == null) return;\n\n        if (e.composedPath().includes(figcaption)) {\n          return;\n        }\n\n        if (typeof getPos === \"function\") {\n          const { view } = editor;\n\n          const { tr } = view.state;\n\n          const captionNode = view.state.doc.nodeAt(getPos() + 1);\n          captionNode?.nodeSize;\n\n          tr.setSelection(\n            TextSelection.create(\n              view.state.doc,\n              getPos() + 1 + (captionNode?.nodeSize || 0),\n            ),\n          );\n\n          view.dispatch(tr);\n\n          // This is for raw HTML, its kinda not a huge deal...\n          // const defaultCaption = toDefaultCaption({ fileName, fileSize })\n          // if (figcaption.innerHTML === defaultCaption || figcaption.innerHTML === defaultCaption.split(\" \u00B7 \").join(\" \")) {\n          //\n          //   // view.dispatch(tr.setNodeMarkup(getPos(), null, { caption: \"\" }))\n          // }\n        }\n      }\n\n      let imgSrc: string | undefined = undefined;\n\n      if (isPreviewable && (url || src)) {\n        imgSrc = url || src;\n      }\n\n      let mouseIsDown = false;\n      let mouseTimeout: number | null = null;\n\n      // This is a very simple drag handler. This allows us to drag non-previewable nodes.\n      // https://discuss.prosemirror.net/t/dragndrop-a-drag-handle-element/4563\n      const handleMouseDown = (_e: MouseEvent) => {\n        // We need to give this a second just so we dont mess with \"click\" behavior.\n        mouseTimeout = setTimeout(() => {\n          mouseIsDown = true;\n        }, 10);\n      };\n\n      const handleMouseUp = (_e: MouseEvent) => {\n        mouseIsDown = false;\n        if (mouseTimeout) {\n          clearTimeout(mouseTimeout);\n        }\n      };\n\n      const handleMouseMove = (_e: MouseEvent) => {\n        if (mouseIsDown && typeof getPos === \"function\") {\n          const { view } = editor;\n          view.dispatch(\n            view.state.tr.setSelection(\n              NodeSelection.create(view.state.doc, getPos()),\n            ),\n          );\n        }\n      };\n\n      function removeFigure(this: HTMLElement) {\n        if (typeof getPos === \"function\") {\n          const { view } = editor;\n\n          const { tr } = view.state;\n\n          const pos = getPos();\n          tr.delete(pos, pos + 1);\n          view.dispatch(tr);\n        }\n\n        // For some reason it doesnt always delete the attachment, so this is some extra insurance.\n        const closestAttachment = this.closest(\".attachment\");\n        if (closestAttachment) {\n          closestAttachment.remove();\n        }\n      }\n\n      const template = html`\n        <figure\n          class=${figureClasses}\n          attachment-type=${this.name}\n          sgid=${ifDefined(sgid ? sgid : undefined)}\n          data-trix-content-type=${contentType}\n          data-trix-attachment=${trixAttachment}\n          data-trix-attributes=${trixAttributes}\n          @click=${handleFigureClick}\n          @mousedown=${handleMouseDown}\n          @mouseup=${handleMouseUp}\n          @mousemove=${handleMouseMove}\n        >\n          <rhino-attachment-editor\n            file-name=${fileName || \"\"}\n            file-size=${String(fileSize || 0)}\n            loading-state=${loadingState || LOADING_STATES.notStarted}\n            progress=${String(sgid || content || !fileSize ? 100 : progress)}\n            contenteditable=\"false\"\n            ?show-metadata=${isPreviewable}\n            .fileUploadErrorMessage=${this.options.fileUploadErrorMessage}\n            .removeFigure=${removeFigure}\n          >\n          </rhino-attachment-editor>\n\n          ${when(\n            content && !isPreviewable,\n            /* This is really not great. This is how Trix does it, but it feels very unsafe.\n               https://github.com/basecamp/trix/blob/fda14c5ae88a0821cf8999a53dcb3572b4172cf0/src/trix/views/attachment_view.js#L36\n            */\n            () => html`${unsafeHTML(content)}`,\n            () => html`\n              <img\n                class=${loadingState === LOADING_STATES.error\n                  ? \"rhino-upload-error\"\n                  : \"\"}\n                width=${String(width)}\n                height=${String(height)}\n                src=${ifDefined(imgSrc)}\n                contenteditable=\"false\"\n              />\n            `,\n          )}\n\n          <figcaption\n            style=\"${Boolean(content) ? \"display: none;\" : \"\"}\"\n            class=${`attachment__caption ${\n              caption ? \"attachment__caption--edited\" : \"is-empty\"\n            }`}\n            data-placeholder=${this.options.captionPlaceholder}\n            data-default-caption=${toDefaultCaption({ fileName, fileSize })}\n          ></figcaption>\n        </figure>\n      `;\n\n      // Scratch element to render into.\n      const scratch = document.createElement(\"div\");\n      render(template, scratch);\n\n      const dom = scratch.firstElementChild;\n      const contentDOM = dom?.querySelector(\"figcaption\");\n\n      let srcRevoked = false;\n\n      return {\n        dom,\n        contentDOM,\n        update(node) {\n          if (node.type.name !== \"attachment\") return false;\n\n          if (!srcRevoked && node.attrs.url) {\n            srcRevoked = true;\n\n            /** Do your part to save the environment. (Try to) prevent memory leaks. */\n            try {\n              URL.revokeObjectURL(node.attrs.src);\n            } catch (_e) {\n              /* We don't really care if this fails. We tried. */\n            }\n          }\n\n          return false;\n        },\n      };\n    };\n  },\n\n  addCommands() {\n    return {\n      setAttachmentAtCoords:\n        (\n          options: AttachmentManager | AttachmentManager[],\n          coordinates: { left: number; top: number },\n        ) =>\n        ({ view, state, tr, dispatch }) => {\n          let posAtCoords = view.posAtCoords(coordinates);\n\n          const currentSelection = state.doc.resolve(posAtCoords?.pos || 0);\n          return handleAttachment(options, currentSelection, {\n            state,\n            tr,\n            dispatch,\n          });\n        },\n      setAttachment:\n        (options: AttachmentManager | AttachmentManager[]) =>\n        ({ state, tr, dispatch }) => {\n          const currentSelection = state.doc.resolve(state.selection.anchor);\n          return handleAttachment(options, currentSelection, {\n            state,\n            tr,\n            dispatch,\n          });\n        },\n    };\n  },\n});\n\nexport const PreviewableAttachment = Attachment.extend({\n  name: \"previewable-attachment-figure\",\n  group: \"block previewableAttachmentFigure\",\n  addOptions() {\n    return {\n      ...Attachment.options,\n      previewable: true,\n    };\n  },\n\n  // We purposely override this to nothing. Because all of the extensions registered by Attachment\n  // are global, they run twice. We don't want that. for example, this causes `rhino-attachment-remove`\n  // to fire twice. No bueno.\n  addProseMirrorPlugins() {\n    return [];\n  },\n});\n\nfunction handleAttachment(\n  options: AttachmentManager | AttachmentManager[],\n  currentSelection: ResolvedPos,\n  { state, tr, dispatch }: Pick<CommandProps, \"state\" | \"tr\" | \"dispatch\">,\n) {\n  const { schema } = state;\n\n  const minSize = 0;\n  const maxSize = tr.doc.content.size;\n\n  function clamp(val: number, min: number = minSize, max: number = maxSize) {\n    if (val < min) return min;\n    if (val > max) return max;\n    return val;\n  }\n\n  // Attachments disabled, dont pass go.\n  const hasGalleriesDisabled = schema.nodes[\"attachment-gallery\"] == null;\n\n  const currentNode = state.doc.resolve(currentSelection.pos);\n  const paragraphTopNode = findParentNodeOfTypeClosestToPos(\n    currentNode,\n    schema.nodes[\"paragraph\"],\n  );\n\n  let currentGallery = findParentNodeOfTypeClosestToPos(\n    state.doc.resolve(currentSelection.pos),\n    schema.nodes[\"attachment-gallery\"],\n  );\n\n  let priorGalleryPos = null;\n\n  if (paragraphTopNode) {\n    const paragraphIsEmpty = currentSelection.parent.textContent === \"\";\n    const prevNode = state.doc.resolve(clamp(paragraphTopNode.pos - 1));\n\n    if (\n      paragraphIsEmpty &&\n      prevNode.parent.type.name === \"attachment-gallery\"\n    ) {\n      priorGalleryPos = clamp(paragraphTopNode.pos - 1);\n    }\n  }\n\n  const isInGallery = currentGallery || priorGalleryPos;\n\n  const attachments: AttachmentManager[] = Array.isArray(options)\n    ? options\n    : ([] as AttachmentManager[]).concat(options);\n\n  let allNodesPreviewable = true;\n\n  let attachmentNodes: ProseMirrorNode[] = [];\n\n  let previewableNodes: ProseMirrorNode[] = [];\n\n  attachments.forEach((attachment) => {\n    const nodeType = attachment.isPreviewable\n      ? \"previewable-attachment-figure\"\n      : \"attachment-figure\";\n\n    const figure = schema.nodes[nodeType].create(\n      attachment,\n      attachment.caption ? [schema.text(attachment.caption)] : [],\n    );\n\n    if (hasGalleriesDisabled) {\n      attachmentNodes.push(figure);\n      return;\n    }\n\n    if (!attachment.isPreviewable) {\n      allNodesPreviewable = false;\n\n      // Make a new gallery. Non-previewable nodes dont belong in galleries.\n      if (previewableNodes.length >= 1) {\n        attachmentNodes = attachmentNodes.concat(\n          schema.nodes[\"attachment-gallery\"].create({}, previewableNodes),\n        );\n        previewableNodes = [];\n      }\n\n      attachmentNodes.push(figure);\n      return;\n    }\n\n    previewableNodes.push(figure);\n  });\n\n  let end = 0;\n\n  if (currentGallery) {\n    end = currentGallery.start + currentGallery.node.nodeSize - 2;\n  } else if (priorGalleryPos != null) {\n    end = priorGalleryPos;\n  }\n\n  end = clamp(end);\n\n  if (hasGalleriesDisabled) {\n    attachmentNodes = attachmentNodes.flatMap((node) => [node]);\n    tr.insert(end, attachmentNodes.concat([schema.nodes.paragraph.create()]));\n\n    if (dispatch) dispatch(tr);\n    return true;\n  }\n\n  if (isInGallery) {\n    if (allNodesPreviewable) {\n      tr.insert(end, previewableNodes);\n    } else {\n      // Make a new gallery. Non-previewable nodes dont belong in galleries.\n      if (!hasGalleriesDisabled && previewableNodes.length >= 1) {\n        attachmentNodes = attachmentNodes.concat(\n          schema.nodes[\"attachment-gallery\"].create({}, previewableNodes),\n        );\n      }\n      tr.insert(end + 1, attachmentNodes);\n    }\n  } else {\n    const currSelection = state.selection;\n\n    // Make a new gallery. Non-previewable nodes dont belong in galleries.\n    if (!hasGalleriesDisabled && previewableNodes.length >= 1) {\n      attachmentNodes = attachmentNodes.concat(\n        schema.nodes[\"attachment-gallery\"].create({}, previewableNodes),\n      );\n    }\n\n    tr.replaceWith(currSelection.from - 1, currSelection.to, [\n      ...attachmentNodes,\n      schema.nodes.paragraph.create(),\n    ]);\n\n    selectionToInsertionEnd(tr, tr.steps.length - 1, -1);\n  }\n\n  if (dispatch) dispatch(tr);\n  return true;\n}\n", "import { Selection, Transaction } from \"@tiptap/pm/state\";\nimport { ReplaceAroundStep, ReplaceStep } from \"@tiptap/pm/transform\";\n\n// source: https://github.com/ueberdosis/tiptap/blob/8c6751f0c638effb22110b62b40a1632ea6867c9/packages/core/src/helpers/selectionToInsertionEnd.ts\nexport function selectionToInsertionEnd(\n  tr: Transaction,\n  startLen: number,\n  bias: number,\n) {\n  const last = tr.steps.length - 1;\n\n  if (last < startLen) {\n    return;\n  }\n\n  const step = tr.steps[last];\n\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {\n    return;\n  }\n\n  const map = tr.mapping.maps[last];\n  let end = 0;\n\n  map.forEach((_from, _to, _newFrom, newTo) => {\n    if (end === 0) {\n      end = newTo;\n    }\n  });\n\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias));\n}\n"],
  "mappings": "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",
  "names": ["previewable", "node"]
}
