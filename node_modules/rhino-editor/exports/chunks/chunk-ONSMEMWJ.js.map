{
  "version": 3,
  "sources": ["../../src/exports/elements/tip-tap-editor-base.ts"],
  "sourcesContent": ["import { BaseElement } from \"../../internal/elements/base-element.js\";\nimport { Content, Editor, EditorOptions } from \"@tiptap/core\";\nimport { tipTapCoreStyles } from \"../styles/tip-tap-core-styles.js\";\n// https://tiptap.dev/api/extensions/starter-kit#included-extensions\nimport StarterKit, { StarterKitOptions } from \"@tiptap/starter-kit\";\nimport {\n  RhinoStarterKit,\n  RhinoStarterKitOptions,\n} from \"../extensions/rhino-starter-kit.js\";\n\nimport {\n  CSSResult,\n  html,\n  PropertyDeclarations,\n  PropertyValueMap,\n  TemplateResult,\n} from \"lit\";\n\nimport { AttachmentUpload } from \"../attachment-upload.js\";\nimport { AttachmentManager } from \"../attachment-manager.js\";\n\nimport { normalize } from \"../styles/normalize.js\";\nimport editorStyles from \"../styles/editor.js\";\n\nimport { AddAttachmentEvent } from \"../events/add-attachment-event.js\";\n\nimport type { Maybe } from \"../../types.js\";\nimport { AttachmentEditor } from \"./attachment-editor.js\";\nimport { FileAcceptEvent } from \"../events/file-accept-event.js\";\nimport { BeforeInitializeEvent } from \"../events/before-initialize-event.js\";\nimport { InitializeEvent } from \"../events/initialize-event.js\";\nimport { RhinoFocusEvent } from \"../events/rhino-focus-event.js\";\nimport { RhinoBlurEvent } from \"../events/rhino-blur-event.js\";\nimport { RhinoChangeEvent } from \"../events/rhino-change-event.js\";\nimport { SelectionChangeEvent } from \"../events/selection-change-event.js\";\nimport { RhinoPasteEvent } from \"../events/rhino-paste-event.js\";\nimport { DOMSerializer, Slice } from \"@tiptap/pm/model\";\nimport { EditorView } from \"@tiptap/pm/view\";\n\nexport type Serializer = \"\" | \"html\" | \"json\";\n\nexport type RhinoEditorStarterKitOptions = StarterKitOptions &\n  RhinoStarterKitOptions & {\n    // Indentation is a special case because it uses built-in editor commands and doesn't rely on extensions.\n    increaseIndentation: boolean;\n    decreaseIndentation: boolean;\n  };\n\nexport class TipTapEditorBase extends BaseElement {\n  // Static\n\n  /**\n   * Default registration name\n   */\n  static baseName = \"rhino-editor\";\n\n  static get styles(): CSSResult[] {\n    return [normalize, tipTapCoreStyles, editorStyles];\n  }\n\n  static get properties(): PropertyDeclarations {\n    return {\n      // Attributes\n      readonly: { type: Boolean, reflect: true },\n      input: { reflect: true },\n      class: { reflect: true },\n      accept: { reflect: true },\n      serializer: { reflect: true },\n\n      // Properties\n      editor: { state: true },\n      editorElement: { state: true },\n      starterKitOptions: { state: true },\n      extensions: { state: true },\n    };\n  }\n\n  // Instance\n\n  /**\n   * Whether or not the editor should be editable.\n   *\n   * NOTE: a user can change this in the browser dev tools, don't rely on this to prevent\n   * users from editing and attempting to save the document.\n   */\n  readonly: boolean = false;\n\n  /**\n   * Prevents premature rebuilds.\n   */\n  hasInitialized = false;\n\n  /**\n   * The hidden input to attach to\n   */\n  input: Maybe<string>;\n\n  /**\n   * The currently attached TipTap instance\n   */\n  editor: Maybe<Editor>;\n\n  /**\n   * The element that TipTap is attached to\n   */\n  editorElement: Maybe<Element>;\n\n  /**\n   * JSON or HTML serializer used for determining the string to write to the hidden input.\n   */\n  serializer: Serializer = \"html\";\n\n  /** Comma separated string passed to the attach-files input. */\n  accept: string = \"*\";\n\n  starterKitOptions: Partial<RhinoEditorStarterKitOptions> = {\n    // We don't use the native strike since it requires configuring ActionText.\n    strike: false,\n    rhinoLink: {\n      openOnClick: false,\n    },\n  };\n\n  /**\n   * This will be concatenated onto RhinoStarterKit and StarterKit extensions.\n   */\n  extensions: EditorOptions[\"extensions\"] = [];\n\n  /**\n   * @internal\n   */\n  __initialAttributes: Record<string, string> = {};\n\n  /**\n   * @internal\n   */\n  __hasRendered: boolean = false;\n\n  __getInitialAttributes() {\n    if (this.__hasRendered) return;\n\n    const slottedEditor = this.slottedEditor;\n    if (slottedEditor) {\n      this.__initialAttributes = {};\n      [...slottedEditor.attributes].forEach((attr) => {\n        const { nodeName, nodeValue } = attr;\n        if (nodeName && nodeValue != null) {\n          this.__initialAttributes[nodeName] = nodeValue;\n        }\n      });\n    }\n\n    this.__hasRendered = true;\n  }\n\n  /**\n   * Reset mechanism. This is called on first connect, and called anytime extensions,\n   * or editor options get modified to make sure we have a fresh instance.\n   */\n  rebuildEditor() {\n    if (!this.hasInitialized) return;\n\n    const editors = this.querySelectorAll(\"[slot='editor']\");\n\n    this.__getInitialAttributes();\n\n    // Make sure we dont render the editor more than once.\n    if (this.editor) this.editor.destroy();\n\n    editors.forEach((el) => {\n      // @ts-expect-error\n      el.editor?.destroy();\n      el.remove();\n    });\n\n    this.editor = this.__setupEditor(this);\n\n    this.__bindEditorListeners();\n\n    this.editorElement = this.querySelector(\".ProseMirror\");\n\n    Object.entries(this.__initialAttributes)?.forEach(\n      ([attrName, attrValue]) => {\n        if (attrName === \"class\") {\n          this.editorElement?.classList.add(...attrValue.split(\" \"));\n          return;\n        }\n        this.editorElement?.setAttribute(attrName, attrValue);\n      },\n    );\n\n    this.editorElement?.setAttribute(\"slot\", \"editor\");\n    this.editorElement?.classList.add(\"trix-content\");\n    this.editorElement?.setAttribute(\"tabindex\", \"0\");\n    this.editorElement?.setAttribute(\"role\", \"textbox\");\n\n    // For good measure for rendering.\n    this.requestUpdate();\n  }\n\n  /**\n   * Grabs HTML content based on a given range. If no range is given, it will return the contents\n   *   of the current editor selection. If the current selection is empty, it will return an empty string.\n   * @param from - The start of the selection\n   * @param to - The end of the selection\n   * @example Getting the HTML content of the current selection\n   *    const rhinoEditor = document.querySelector(\"rhino-editor\")\n   *    rhinoEditor.getHTMLContentFromRange()\n   *\n   * @example Getting the HTML content of node range\n   *    const rhinoEditor = document.querySelector(\"rhino-editor\")\n   *    rhinoEditor.getHTMLContentFromRange(0, 50)\n   *\n   * @example Getting the HTML content and falling back to entire editor HTML\n   *    const rhinoEditor = document.querySelector(\"rhino-editor\")\n   *    let html = rhinoEditor.getHTMLContentFromRange()\n   *    if (!html) {\n   *       html = rhinoEditor.editor.getHTML()\n   *    }\n   */\n  getHTMLContentFromRange(from?: number, to?: number) {\n    const editor = this.editor;\n\n    if (!editor) return \"\";\n\n    let empty;\n\n    if (!from && !to) {\n      const currentSelection = editor.state.selection;\n\n      from = currentSelection.from;\n      to = currentSelection.to;\n    }\n\n    if (empty) {\n      return \"\";\n    }\n    if (from == null) {\n      return \"\";\n    }\n    if (to == null) {\n      return \"\";\n    }\n\n    const { state } = editor;\n    const htmlArray: string[] = [];\n\n    const tempScript = document.createElement(\"script\");\n    // We want plain text so we don't parse.\n    tempScript.type = \"text/plain\";\n\n    state.doc.nodesBetween(from, to, (node, _pos, parent) => {\n      if (parent === state.doc) {\n        tempScript.innerHTML = \"\";\n        const serializer = DOMSerializer.fromSchema(editor.schema);\n        const dom = serializer.serializeNode(node);\n        tempScript.appendChild(dom);\n        htmlArray.push(tempScript.innerHTML);\n        tempScript.innerHTML = \"\";\n      }\n    });\n\n    return htmlArray.join(\"\");\n  }\n\n  /**\n   * Grabs plain text representation based on a given range. If no parameters are given, it will return the contents\n   *   of the current selection. If the current selection is empty, it will return an empty string.\n   * @param from - The start of the selection\n   * @param to - The end of the selection\n   * @example Getting the Text content of the current selection\n   *    const rhinoEditor = document.querySelector(\"rhino-editor\")\n   *    rhinoEditor.getTextContentFromRange()\n   *\n   * @example Getting the Text content of node range\n   *    const rhinoEditor = document.querySelector(\"rhino-editor\")\n   *    rhinoEditor.getTextContentFromRange(0, 50)\n   *\n   * @example Getting the Text content and falling back to entire editor Text\n   *    const rhinoEditor = document.querySelector(\"rhino-editor\")\n   *    let text = rhinoEditor.getTextContentFromRange()\n   *    if (!text) {\n   *       text = rhinoEditor.editor.getText()\n   *    }\n   */\n  getTextContentFromRange(from?: number, to?: number) {\n    const editor = this.editor;\n\n    if (!editor) {\n      return \"\";\n    }\n\n    let empty;\n\n    if (!from && !to) {\n      const selection = editor.state.selection;\n      from = selection.from;\n      to = selection.to;\n      empty = selection.empty;\n    }\n\n    if (empty) {\n      return \"\";\n    }\n    if (from == null) {\n      return \"\";\n    }\n    if (to == null) {\n      return \"\";\n    }\n\n    return editor.state.doc.textBetween(from, to, \" \");\n  }\n\n  protected willUpdate(\n    changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>,\n  ): void {\n    if (changedProperties.has(\"class\")) {\n      this.classList.add(\"rhino-editor\");\n    }\n\n    super.willUpdate(changedProperties);\n  }\n\n  protected updated(\n    changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>,\n  ): void {\n    if (!this.hasInitialized) {\n      return super.updated(changedProperties);\n    }\n\n    if (changedProperties.has(\"readonly\")) {\n      this.editor?.setEditable(!this.readonly);\n    }\n\n    if (\n      changedProperties.has(\"extensions\") ||\n      changedProperties.has(\"serializer\") ||\n      changedProperties.has(\"starterKitOptions\") ||\n      changedProperties.has(\"translations\")\n    ) {\n      this.rebuildEditor();\n    }\n\n    if (changedProperties.has(\"serializer\")) {\n      this.updateInputElementValue();\n    }\n\n    super.updated(changedProperties);\n  }\n\n  /** Used for registering things like <role-toolbar>, <role-tooltip>, <rhino-attachment-editor> */\n  registerDependencies() {\n    [AttachmentEditor].forEach((el) => el.define());\n  }\n\n  get slottedEditor() {\n    return this.querySelector(\"[slot='editor']\");\n  }\n\n  constructor() {\n    super();\n\n    this.registerDependencies();\n    this.addEventListener(AddAttachmentEvent.eventName, this.handleAttachment);\n\n    this.addEventListener(\"drop\", this.handleNativeDrop);\n    this.addEventListener(\"rhino-paste\", this.handlePaste);\n    this.addEventListener(\"rhino-file-accept\", this.handleFileAccept);\n  }\n\n  async connectedCallback(): Promise<void> {\n    super.connectedCallback();\n\n    this.__setupInitialization__();\n\n    if (this.editor) {\n      this.__unBindEditorListeners();\n    }\n\n    this.classList.add(\"rhino-editor\");\n\n    await this.updateComplete;\n\n    setTimeout(() => {\n      this.dispatchEvent(new BeforeInitializeEvent());\n\n      setTimeout(async () => {\n        await this.updateComplete;\n        this.hasInitialized = true;\n        this.rebuildEditor();\n        this.dispatchEvent(new InitializeEvent());\n        this.__initializationResolver__?.();\n      });\n    });\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    this.editor?.destroy();\n    this.hasInitialized = false;\n    this.__initializationPromise__ = null;\n    this.__initializationResolver__ = null;\n  }\n\n  __initializationPromise__: null | Promise<void> = null;\n  __initializationResolver__:\n    | null\n    | ((value: void | PromiseLike<void>) => void) = null;\n\n  __setupInitialization__() {\n    if (!this.__initializationPromise__) {\n      this.__initializationPromise__ = new Promise<void>((resolve) => {\n        this.__initializationResolver__ = resolve;\n      });\n    }\n  }\n\n  get initializationComplete() {\n    this.__setupInitialization__();\n    return this.__initializationPromise__;\n  }\n\n  /**\n   * Used for determining how to handle uploads.\n   *   Override this for substituting your own\n   *   direct upload functionality.\n   */\n  handleAttachment = (event: AddAttachmentEvent) => {\n    // To allow for event delegation to take effect, we wait until the next event loop to handle the attachment.\n    setTimeout(() => {\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      const { attachment, target } = event;\n\n      if (target instanceof HTMLElement && attachment.file) {\n        const upload = new AttachmentUpload(attachment, target);\n        upload.start();\n      }\n    });\n  };\n\n  /** Override this to prevent specific file types from being uploaded. */\n  handleFileAccept = (_event: FileAcceptEvent) => {};\n\n  addExtensions(\n    ...extensions:\n      | EditorOptions[\"extensions\"]\n      | Array<EditorOptions[\"extensions\"]>\n  ) {\n    if (Array.isArray(extensions)) {\n      extensions = extensions.flat(1);\n    }\n\n    this.extensions = this.extensions.concat(extensions);\n  }\n\n  /**\n   * Extend this to provide your own options, or override existing options.\n   * The \"element\" is where the editor will be initialized.\n   * This will be merged\n   *   @example\n   *    class ExtendedRhinoEditor extends TipTapEditor {\n   *      editorOptions (_element: Element) {\n   *        return {\n   *          autofocus: true\n   *        }\n   *      }\n   *    }\n   *\n   */\n  editorOptions(_element?: Element): Partial<EditorOptions> {\n    return {};\n  }\n\n  /**\n   * Finds the <input> element in the light dom and updates it with the value of `#serialize()`\n   */\n  updateInputElementValue() {\n    if (this.inputElement != null && this.editor != null && !this.readonly) {\n      this.inputElement.value = this.serialize();\n    }\n  }\n\n  /**\n   * Function called when grabbing the content of the editor. Currently supports JSON or HTML.\n   */\n  serialize() {\n    if (this.editor == null) return \"\";\n\n    if (this.serializer?.toLowerCase() === \"json\") {\n      return JSON.stringify(this.editor.getJSON());\n    }\n\n    return this.editor.getHTML();\n  }\n\n  /**\n   * Searches for the <input> element in the light dom to write the HTML or JSON to.\n   */\n  get inputElement(): Maybe<HTMLInputElement> {\n    if (this.input == null) return undefined;\n\n    return document.getElementById(this.input) as Maybe<HTMLInputElement>;\n  }\n\n  async handleFiles(files: File[] | FileList): Promise<AttachmentManager[]> {\n    if (this.editor == null) return [];\n    if (files == null) return [];\n\n    return new Promise((resolve, _reject) => {\n      const fileAcceptEvents = [...files].map((file) => {\n        const event = new FileAcceptEvent(file);\n        this.dispatchEvent(event);\n        return event;\n      });\n\n      const allowedFiles: File[] = [];\n\n      for (let i = 0; i < fileAcceptEvents.length; i++) {\n        const event = fileAcceptEvents[i];\n        if (event.defaultPrevented) {\n          continue;\n        }\n        allowedFiles.push(event.file);\n      }\n\n      const attachments = this.transformFilesToAttachments(allowedFiles);\n\n      if (attachments == null || attachments.length <= 0) return;\n\n      attachments.forEach((attachment) => {\n        this.dispatchEvent(new AddAttachmentEvent(attachment));\n      });\n\n      // Need to reset the input otherwise you get this fun state where you can't\n      //   insert the same file multiple times.\n      resolve(attachments);\n    });\n  }\n\n  handleDropFile = (\n    _view: EditorView,\n    event: DragEvent,\n    _slice: Slice,\n    moved: boolean,\n  ) => {\n    if (!(event instanceof DragEvent)) return false;\n    if (moved) return false;\n\n    return this.handleNativeDrop(event);\n  };\n\n  /**\n   * Handles dropped files on the component, but not on the prosemirror instance.\n   */\n  handleNativeDrop(event: DragEvent): boolean {\n    if (this.editor == null) return false;\n    if (event == null) return false;\n    //\n    const { dataTransfer } = event;\n    if (dataTransfer == null) return false;\n    if (dataTransfer.files.length <= 0) return false;\n\n    // This prevents this from firing twice because we both attach here and on the prosemirror instance\n    if (event.defaultPrevented) return false;\n\n    event.preventDefault();\n\n    this.handleFiles(dataTransfer.files).then((attachments) => {\n      this.editor\n        ?.chain()\n        .focus()\n        .setAttachmentAtCoords(attachments, {\n          top: event.clientY,\n          left: event.clientX,\n        })\n        .run();\n    });\n\n    return true;\n  }\n\n  handlePaste = async (event: RhinoPasteEvent) => {\n    if (this.editor == null) return;\n    if (event == null) return;\n    if (!(event instanceof ClipboardEvent)) return;\n\n    const { clipboardData } = event;\n    if (clipboardData == null) return;\n\n    const hasFiles = clipboardData.files?.length > 0;\n    if (!hasFiles) return;\n\n    event.preventDefault();\n\n    // This inserts the file name, this is consistent with Trix, but can feel weird.\n    this.editor.commands.insertContent(clipboardData.items);\n    const attachments = await this.handleFiles(clipboardData.files);\n\n    if (attachments.length > 0) {\n      this.editor?.chain().focus().setAttachment(attachments).run();\n    }\n  };\n\n  transformFilesToAttachments(files?: File[] | FileList | null) {\n    if (this.editor == null) return;\n    if (files == null || files.length === 0) return;\n\n    const attachments: AttachmentManager[] = [];\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n\n      if (file == null) return;\n      const src = URL.createObjectURL(file);\n\n      const attachment: AttachmentManager = new AttachmentManager(\n        {\n          src,\n          file,\n        },\n        this.editor.view,\n      );\n\n      attachments.push(attachment);\n    }\n\n    return attachments;\n  }\n\n  renderToolbar() {\n    return html``;\n  }\n\n  renderDialog() {}\n\n  render(): TemplateResult {\n    return html`\n      ${this.renderToolbar()}\n      <div class=\"editor-wrapper\" part=\"editor-wrapper\">\n        ${this.renderDialog()}\n        <div class=\"editor\" part=\"editor\">\n          <slot name=\"editor\">\n            <div class=\"trix-content\"></div>\n          </slot>\n        </div>\n      </div>\n    `;\n  }\n\n  allOptions(element: Element) {\n    return Object.assign(\n      this.__defaultOptions(element),\n      this.editorOptions(element),\n    );\n  }\n\n  /**\n   * Due to some inconsistencies in how Trix will render the inputElement based on if its\n   * the HTML representation, or transfromed with `#to_trix_html` this gives\n   * us a consistent DOM structure to parse for rich text comments.\n   */\n  private normalizeDOM(\n    inputElement: Maybe<HTMLInputElement>,\n    parser = new DOMParser(),\n  ) {\n    if (inputElement == null || inputElement.value == null) return;\n\n    const doc = parser.parseFromString(inputElement.value, \"text/html\");\n    const figures = [...doc.querySelectorAll(\"figure[data-trix-attachment]\")];\n    const filtersWithoutChildren = figures.filter(\n      (figure) => figure.querySelector(\"figcaption\") == null,\n    );\n\n    doc.querySelectorAll(\"div > figure:first-child\").forEach((el) => {\n      el.parentElement?.classList.add(\"attachment-gallery\");\n    });\n\n    filtersWithoutChildren.forEach((figure) => {\n      const attrs = figure.getAttribute(\"data-trix-attributes\");\n\n      if (!attrs) return;\n\n      const { caption } = JSON.parse(attrs);\n      if (caption) {\n        figure.insertAdjacentHTML(\n          \"beforeend\",\n          `<figcaption class=\"attachment__caption\">${caption}</figcaption>`,\n        );\n        return;\n      }\n    });\n\n    doc\n      .querySelectorAll(\n        \"figure :not(.attachment__caption--edited) .attachment__name\",\n      )\n      .forEach((el) => {\n        if (el.textContent?.includes(\" \u00B7 \") === false) return;\n\n        el.insertAdjacentText(\"beforeend\", \" \u00B7 \");\n      });\n\n    const body = doc.querySelector(\"body\");\n\n    if (body) {\n      inputElement.value = body.innerHTML;\n    }\n  }\n\n  /**\n   * @private\n   * Use a getter here so when we rebuild the editor it pulls the latest starterKitOptions\n   * This is intentionally not to be configured by a user. It makes updating extensions hard.\n   *  it also is a getter and not a variable so that it will rerun in case options change.\n   */\n  private get __starterKitExtensions__(): EditorOptions[\"extensions\"] {\n    return [\n      StarterKit.configure(this.starterKitOptions),\n      RhinoStarterKit.configure(this.starterKitOptions),\n    ];\n  }\n\n  /**\n   * @param {Element} element - The element that the editor will be installed onto.\n   */\n  private __defaultOptions(element: Element): Partial<EditorOptions> {\n    let content: Content = this.inputElement?.value || \"\";\n\n    if (content) {\n      try {\n        content = JSON.parse(content);\n      } catch (e) {}\n    }\n\n    return {\n      injectCSS: false,\n      extensions: this.__starterKitExtensions__.concat(this.extensions),\n      autofocus: false,\n      element,\n      content,\n      editable: !this.readonly,\n      editorProps: {\n        handleDrop: this.handleDropFile,\n      },\n    };\n  }\n\n  private __handleCreate: EditorOptions[\"onCreate\"] = () => {\n    this.requestUpdate();\n  };\n\n  private __handleUpdate: EditorOptions[\"onUpdate\"] = () => {\n    this.requestUpdate();\n\n    if (!this.hasInitialized) {\n      return;\n    }\n\n    // We dont want to update until we've fully initialized to give time for user extensions to kick in.\n    this.updateInputElementValue();\n    this.dispatchEvent(new RhinoChangeEvent());\n  };\n\n  private __handleFocus: EditorOptions[\"onFocus\"] = () => {\n    this.dispatchEvent(new RhinoFocusEvent());\n    this.requestUpdate();\n  };\n\n  private __handleBlur: EditorOptions[\"onBlur\"] = () => {\n    this.updateInputElementValue();\n    this.requestUpdate();\n    this.dispatchEvent(new RhinoBlurEvent());\n  };\n\n  private __handleSelectionUpdate: EditorOptions[\"onSelectionUpdate\"] = ({\n    transaction,\n  }) => {\n    this.requestUpdate();\n    this.dispatchEvent(new SelectionChangeEvent({ transaction }));\n  };\n\n  private __handleTransaction: EditorOptions[\"onTransaction\"] = () => {\n    this.requestUpdate();\n  };\n\n  private __bindEditorListeners(): void {\n    if (this.editor == null) return;\n\n    this.editor.on(\"focus\", this.__handleFocus);\n    this.editor.on(\"create\", this.__handleCreate);\n    this.editor.on(\"update\", this.__handleUpdate);\n    this.editor.on(\"selectionUpdate\", this.__handleSelectionUpdate);\n    this.editor.on(\"transaction\", this.__handleTransaction);\n    this.editor.on(\"blur\", this.__handleBlur);\n  }\n\n  private __unBindEditorListeners(): void {\n    if (this.editor == null) return;\n\n    this.editor.off(\"focus\", this.__handleFocus);\n    this.editor.off(\"create\", this.__handleCreate);\n    this.editor.off(\"update\", this.__handleUpdate);\n    this.editor.off(\"selectionUpdate\", this.__handleSelectionUpdate);\n    this.editor.off(\"transaction\", this.__handleTransaction);\n    this.editor.off(\"blur\", this.__handleBlur);\n  }\n\n  private __setupEditor(element: Element = this): Editor {\n    if (!this.serializer || this.serializer === \"html\") {\n      // This is a super hacky way to get __to_trix_html to support figcaptions without patching it.\n      this.normalizeDOM(this.inputElement);\n    }\n\n    const editor = new Editor(this.allOptions(element));\n\n    return editor;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAkB,cAA6B;AAG/C,OAAO,gBAAuC;AAM9C;AAAA,EAEE;AAAA,OAIK;AAoBP,SAAS,qBAA4B;AAY9B,IAAM,mBAAN,cAA+B,YAAY;AAAA,EAwThD,cAAc;AACZ,UAAM;AApRR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAoB;AAKpB;AAAA;AAAA;AAAA,0BAAiB;AAoBjB;AAAA;AAAA;AAAA,sBAAyB;AAGzB;AAAA,kBAAiB;AAEjB,6BAA2D;AAAA;AAAA,MAEzD,QAAQ;AAAA,MACR,WAAW;AAAA,QACT,aAAa;AAAA,MACf;AAAA,IACF;AAKA;AAAA;AAAA;AAAA,sBAA0C,CAAC;AAK3C;AAAA;AAAA;AAAA,+BAA8C,CAAC;AAK/C;AAAA;AAAA;AAAA,yBAAyB;AA8QzB,qCAAkD;AAClD,sCAEkD;AAoBlD;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAmB,CAAC,UAA8B;AAEhD,iBAAW,MAAM;AACf,YAAI,MAAM,kBAAkB;AAC1B;AAAA,QACF;AAEA,cAAM,EAAE,YAAY,OAAO,IAAI;AAE/B,YAAI,kBAAkB,eAAe,WAAW,MAAM;AACpD,gBAAM,SAAS,IAAI,iBAAiB,YAAY,MAAM;AACtD,iBAAO,MAAM;AAAA,QACf;AAAA,MACF,CAAC;AAAA,IACH;AAGA;AAAA,4BAAmB,CAAC,WAA4B;AAAA,IAAC;AAkGjD,0BAAiB,CACf,OACA,OACA,QACA,UACG;AACH,UAAI,EAAE,iBAAiB;AAAY,eAAO;AAC1C,UAAI;AAAO,eAAO;AAElB,aAAO,KAAK,iBAAiB,KAAK;AAAA,IACpC;AAgCA,uBAAc,OAAO,UAA2B;AAC9C,UAAI,KAAK,UAAU;AAAM;AACzB,UAAI,SAAS;AAAM;AACnB,UAAI,EAAE,iBAAiB;AAAiB;AAExC,YAAM,EAAE,cAAc,IAAI;AAC1B,UAAI,iBAAiB;AAAM;AAE3B,YAAM,WAAW,cAAc,OAAO,SAAS;AAC/C,UAAI,CAAC;AAAU;AAEf,YAAM,eAAe;AAGrB,WAAK,OAAO,SAAS,cAAc,cAAc,KAAK;AACtD,YAAM,cAAc,MAAM,KAAK,YAAY,cAAc,KAAK;AAE9D,UAAI,YAAY,SAAS,GAAG;AAC1B,aAAK,QAAQ,MAAM,EAAE,MAAM,EAAE,cAAc,WAAW,EAAE,IAAI;AAAA,MAC9D;AAAA,IACF;AAiJA,SAAQ,iBAA4C,MAAM;AACxD,WAAK,cAAc;AAAA,IACrB;AAEA,SAAQ,iBAA4C,MAAM;AACxD,WAAK,cAAc;AAEnB,UAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,MACF;AAGA,WAAK,wBAAwB;AAC7B,WAAK,cAAc,IAAI,iBAAiB,CAAC;AAAA,IAC3C;AAEA,SAAQ,gBAA0C,MAAM;AACtD,WAAK,cAAc,IAAI,gBAAgB,CAAC;AACxC,WAAK,cAAc;AAAA,IACrB;AAEA,SAAQ,eAAwC,MAAM;AACpD,WAAK,wBAAwB;AAC7B,WAAK,cAAc;AACnB,WAAK,cAAc,IAAI,eAAe,CAAC;AAAA,IACzC;AAEA,SAAQ,0BAA8D,CAAC;AAAA,MACrE;AAAA,IACF,MAAM;AACJ,WAAK,cAAc;AACnB,WAAK,cAAc,IAAI,qBAAqB,EAAE,YAAY,CAAC,CAAC;AAAA,IAC9D;AAEA,SAAQ,sBAAsD,MAAM;AAClE,WAAK,cAAc;AAAA,IACrB;AAxaE,SAAK,qBAAqB;AAC1B,SAAK,iBAAiB,mBAAmB,WAAW,KAAK,gBAAgB;AAEzE,SAAK,iBAAiB,QAAQ,KAAK,gBAAgB;AACnD,SAAK,iBAAiB,eAAe,KAAK,WAAW;AACrD,SAAK,iBAAiB,qBAAqB,KAAK,gBAAgB;AAAA,EAClE;AAAA,EAzTA,WAAW,SAAsB;AAC/B,WAAO,CAAC,WAAW,kBAAkB,cAAY;AAAA,EACnD;AAAA,EAEA,WAAW,aAAmC;AAC5C,WAAO;AAAA;AAAA,MAEL,UAAU,EAAE,MAAM,SAAS,SAAS,KAAK;AAAA,MACzC,OAAO,EAAE,SAAS,KAAK;AAAA,MACvB,OAAO,EAAE,SAAS,KAAK;AAAA,MACvB,QAAQ,EAAE,SAAS,KAAK;AAAA,MACxB,YAAY,EAAE,SAAS,KAAK;AAAA;AAAA,MAG5B,QAAQ,EAAE,OAAO,KAAK;AAAA,MACtB,eAAe,EAAE,OAAO,KAAK;AAAA,MAC7B,mBAAmB,EAAE,OAAO,KAAK;AAAA,MACjC,YAAY,EAAE,OAAO,KAAK;AAAA,IAC5B;AAAA,EACF;AAAA,EA+DA,yBAAyB;AACvB,QAAI,KAAK;AAAe;AAExB,UAAM,gBAAgB,KAAK;AAC3B,QAAI,eAAe;AACjB,WAAK,sBAAsB,CAAC;AAC5B,OAAC,GAAG,cAAc,UAAU,EAAE,QAAQ,CAAC,SAAS;AAC9C,cAAM,EAAE,UAAU,UAAU,IAAI;AAChC,YAAI,YAAY,aAAa,MAAM;AACjC,eAAK,oBAAoB,QAAQ,IAAI;AAAA,QACvC;AAAA,MACF,CAAC;AAAA,IACH;AAEA,SAAK,gBAAgB;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB;AACd,QAAI,CAAC,KAAK;AAAgB;AAE1B,UAAM,UAAU,KAAK,iBAAiB,iBAAiB;AAEvD,SAAK,uBAAuB;AAG5B,QAAI,KAAK;AAAQ,WAAK,OAAO,QAAQ;AAErC,YAAQ,QAAQ,CAAC,OAAO;AAEtB,SAAG,QAAQ,QAAQ;AACnB,SAAG,OAAO;AAAA,IACZ,CAAC;AAED,SAAK,SAAS,KAAK,cAAc,IAAI;AAErC,SAAK,sBAAsB;AAE3B,SAAK,gBAAgB,KAAK,cAAc,cAAc;AAEtD,WAAO,QAAQ,KAAK,mBAAmB,GAAG;AAAA,MACxC,CAAC,CAAC,UAAU,SAAS,MAAM;AACzB,YAAI,aAAa,SAAS;AACxB,eAAK,eAAe,UAAU,IAAI,GAAG,UAAU,MAAM,GAAG,CAAC;AACzD;AAAA,QACF;AACA,aAAK,eAAe,aAAa,UAAU,SAAS;AAAA,MACtD;AAAA,IACF;AAEA,SAAK,eAAe,aAAa,QAAQ,QAAQ;AACjD,SAAK,eAAe,UAAU,IAAI,cAAc;AAChD,SAAK,eAAe,aAAa,YAAY,GAAG;AAChD,SAAK,eAAe,aAAa,QAAQ,SAAS;AAGlD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,wBAAwB,MAAe,IAAa;AAClD,UAAM,SAAS,KAAK;AAEpB,QAAI,CAAC;AAAQ,aAAO;AAEpB,QAAI;AAEJ,QAAI,CAAC,QAAQ,CAAC,IAAI;AAChB,YAAM,mBAAmB,OAAO,MAAM;AAEtC,aAAO,iBAAiB;AACxB,WAAK,iBAAiB;AAAA,IACxB;AAEA,QAAI,OAAO;AACT,aAAO;AAAA,IACT;AACA,QAAI,QAAQ,MAAM;AAChB,aAAO;AAAA,IACT;AACA,QAAI,MAAM,MAAM;AACd,aAAO;AAAA,IACT;AAEA,UAAM,EAAE,MAAM,IAAI;AAClB,UAAM,YAAsB,CAAC;AAE7B,UAAM,aAAa,SAAS,cAAc,QAAQ;AAElD,eAAW,OAAO;AAElB,UAAM,IAAI,aAAa,MAAM,IAAI,CAAC,MAAM,MAAM,WAAW;AACvD,UAAI,WAAW,MAAM,KAAK;AACxB,mBAAW,YAAY;AACvB,cAAM,aAAa,cAAc,WAAW,OAAO,MAAM;AACzD,cAAM,MAAM,WAAW,cAAc,IAAI;AACzC,mBAAW,YAAY,GAAG;AAC1B,kBAAU,KAAK,WAAW,SAAS;AACnC,mBAAW,YAAY;AAAA,MACzB;AAAA,IACF,CAAC;AAED,WAAO,UAAU,KAAK,EAAE;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,wBAAwB,MAAe,IAAa;AAClD,UAAM,SAAS,KAAK;AAEpB,QAAI,CAAC,QAAQ;AACX,aAAO;AAAA,IACT;AAEA,QAAI;AAEJ,QAAI,CAAC,QAAQ,CAAC,IAAI;AAChB,YAAM,YAAY,OAAO,MAAM;AAC/B,aAAO,UAAU;AACjB,WAAK,UAAU;AACf,cAAQ,UAAU;AAAA,IACpB;AAEA,QAAI,OAAO;AACT,aAAO;AAAA,IACT;AACA,QAAI,QAAQ,MAAM;AAChB,aAAO;AAAA,IACT;AACA,QAAI,MAAM,MAAM;AACd,aAAO;AAAA,IACT;AAEA,WAAO,OAAO,MAAM,IAAI,YAAY,MAAM,IAAI,GAAG;AAAA,EACnD;AAAA,EAEU,WACR,mBACM;AACN,QAAI,kBAAkB,IAAI,OAAO,GAAG;AAClC,WAAK,UAAU,IAAI,cAAc;AAAA,IACnC;AAEA,UAAM,WAAW,iBAAiB;AAAA,EACpC;AAAA,EAEU,QACR,mBACM;AACN,QAAI,CAAC,KAAK,gBAAgB;AACxB,aAAO,MAAM,QAAQ,iBAAiB;AAAA,IACxC;AAEA,QAAI,kBAAkB,IAAI,UAAU,GAAG;AACrC,WAAK,QAAQ,YAAY,CAAC,KAAK,QAAQ;AAAA,IACzC;AAEA,QACE,kBAAkB,IAAI,YAAY,KAClC,kBAAkB,IAAI,YAAY,KAClC,kBAAkB,IAAI,mBAAmB,KACzC,kBAAkB,IAAI,cAAc,GACpC;AACA,WAAK,cAAc;AAAA,IACrB;AAEA,QAAI,kBAAkB,IAAI,YAAY,GAAG;AACvC,WAAK,wBAAwB;AAAA,IAC/B;AAEA,UAAM,QAAQ,iBAAiB;AAAA,EACjC;AAAA;AAAA,EAGA,uBAAuB;AACrB,KAAC,gBAAgB,EAAE,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;AAAA,EAChD;AAAA,EAEA,IAAI,gBAAgB;AAClB,WAAO,KAAK,cAAc,iBAAiB;AAAA,EAC7C;AAAA,EAaA,MAAM,oBAAmC;AACvC,UAAM,kBAAkB;AAExB,SAAK,wBAAwB;AAE7B,QAAI,KAAK,QAAQ;AACf,WAAK,wBAAwB;AAAA,IAC/B;AAEA,SAAK,UAAU,IAAI,cAAc;AAEjC,UAAM,KAAK;AAEX,eAAW,MAAM;AACf,WAAK,cAAc,IAAI,sBAAsB,CAAC;AAE9C,iBAAW,YAAY;AACrB,cAAM,KAAK;AACX,aAAK,iBAAiB;AACtB,aAAK,cAAc;AACnB,aAAK,cAAc,IAAI,gBAAgB,CAAC;AACxC,aAAK,6BAA6B;AAAA,MACpC,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEA,uBAAuB;AACrB,UAAM,qBAAqB;AAE3B,SAAK,QAAQ,QAAQ;AACrB,SAAK,iBAAiB;AACtB,SAAK,4BAA4B;AACjC,SAAK,6BAA6B;AAAA,EACpC;AAAA,EAOA,0BAA0B;AACxB,QAAI,CAAC,KAAK,2BAA2B;AACnC,WAAK,4BAA4B,IAAI,QAAc,CAAC,YAAY;AAC9D,aAAK,6BAA6B;AAAA,MACpC,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,IAAI,yBAAyB;AAC3B,SAAK,wBAAwB;AAC7B,WAAO,KAAK;AAAA,EACd;AAAA,EA0BA,iBACK,YAGH;AACA,QAAI,MAAM,QAAQ,UAAU,GAAG;AAC7B,mBAAa,WAAW,KAAK,CAAC;AAAA,IAChC;AAEA,SAAK,aAAa,KAAK,WAAW,OAAO,UAAU;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,cAAc,UAA4C;AACxD,WAAO,CAAC;AAAA,EACV;AAAA;AAAA;AAAA;AAAA,EAKA,0BAA0B;AACxB,QAAI,KAAK,gBAAgB,QAAQ,KAAK,UAAU,QAAQ,CAAC,KAAK,UAAU;AACtE,WAAK,aAAa,QAAQ,KAAK,UAAU;AAAA,IAC3C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY;AACV,QAAI,KAAK,UAAU;AAAM,aAAO;AAEhC,QAAI,KAAK,YAAY,YAAY,MAAM,QAAQ;AAC7C,aAAO,KAAK,UAAU,KAAK,OAAO,QAAQ,CAAC;AAAA,IAC7C;AAEA,WAAO,KAAK,OAAO,QAAQ;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,eAAwC;AAC1C,QAAI,KAAK,SAAS;AAAM,aAAO;AAE/B,WAAO,SAAS,eAAe,KAAK,KAAK;AAAA,EAC3C;AAAA,EAEA,MAAM,YAAY,OAAwD;AACxE,QAAI,KAAK,UAAU;AAAM,aAAO,CAAC;AACjC,QAAI,SAAS;AAAM,aAAO,CAAC;AAE3B,WAAO,IAAI,QAAQ,CAAC,SAAS,YAAY;AACvC,YAAM,mBAAmB,CAAC,GAAG,KAAK,EAAE,IAAI,CAAC,SAAS;AAChD,cAAM,QAAQ,IAAI,gBAAgB,IAAI;AACtC,aAAK,cAAc,KAAK;AACxB,eAAO;AAAA,MACT,CAAC;AAED,YAAM,eAAuB,CAAC;AAE9B,eAAS,IAAI,GAAG,IAAI,iBAAiB,QAAQ,KAAK;AAChD,cAAM,QAAQ,iBAAiB,CAAC;AAChC,YAAI,MAAM,kBAAkB;AAC1B;AAAA,QACF;AACA,qBAAa,KAAK,MAAM,IAAI;AAAA,MAC9B;AAEA,YAAM,cAAc,KAAK,4BAA4B,YAAY;AAEjE,UAAI,eAAe,QAAQ,YAAY,UAAU;AAAG;AAEpD,kBAAY,QAAQ,CAAC,eAAe;AAClC,aAAK,cAAc,IAAI,mBAAmB,UAAU,CAAC;AAAA,MACvD,CAAC;AAID,cAAQ,WAAW;AAAA,IACrB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAiBA,iBAAiB,OAA2B;AAC1C,QAAI,KAAK,UAAU;AAAM,aAAO;AAChC,QAAI,SAAS;AAAM,aAAO;AAE1B,UAAM,EAAE,aAAa,IAAI;AACzB,QAAI,gBAAgB;AAAM,aAAO;AACjC,QAAI,aAAa,MAAM,UAAU;AAAG,aAAO;AAG3C,QAAI,MAAM;AAAkB,aAAO;AAEnC,UAAM,eAAe;AAErB,SAAK,YAAY,aAAa,KAAK,EAAE,KAAK,CAAC,gBAAgB;AACzD,WAAK,QACD,MAAM,EACP,MAAM,EACN,sBAAsB,aAAa;AAAA,QAClC,KAAK,MAAM;AAAA,QACX,MAAM,MAAM;AAAA,MACd,CAAC,EACA,IAAI;AAAA,IACT,CAAC;AAED,WAAO;AAAA,EACT;AAAA,EAwBA,4BAA4B,OAAkC;AAC5D,QAAI,KAAK,UAAU;AAAM;AACzB,QAAI,SAAS,QAAQ,MAAM,WAAW;AAAG;AAEzC,UAAM,cAAmC,CAAC;AAC1C,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,YAAM,OAAO,MAAM,CAAC;AAEpB,UAAI,QAAQ;AAAM;AAClB,YAAM,MAAM,IAAI,gBAAgB,IAAI;AAEpC,YAAM,aAAgC,IAAI;AAAA,QACxC;AAAA,UACE;AAAA,UACA;AAAA,QACF;AAAA,QACA,KAAK,OAAO;AAAA,MACd;AAEA,kBAAY,KAAK,UAAU;AAAA,IAC7B;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,gBAAgB;AACd,WAAO;AAAA,EACT;AAAA,EAEA,eAAe;AAAA,EAAC;AAAA,EAEhB,SAAyB;AACvB,WAAO;AAAA,QACH,KAAK,cAAc,CAAC;AAAA;AAAA,UAElB,KAAK,aAAa,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ3B;AAAA,EAEA,WAAW,SAAkB;AAC3B,WAAO,OAAO;AAAA,MACZ,KAAK,iBAAiB,OAAO;AAAA,MAC7B,KAAK,cAAc,OAAO;AAAA,IAC5B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,aACN,cACA,SAAS,IAAI,UAAU,GACvB;AACA,QAAI,gBAAgB,QAAQ,aAAa,SAAS;AAAM;AAExD,UAAM,MAAM,OAAO,gBAAgB,aAAa,OAAO,WAAW;AAClE,UAAM,UAAU,CAAC,GAAG,IAAI,iBAAiB,8BAA8B,CAAC;AACxE,UAAM,yBAAyB,QAAQ;AAAA,MACrC,CAAC,WAAW,OAAO,cAAc,YAAY,KAAK;AAAA,IACpD;AAEA,QAAI,iBAAiB,0BAA0B,EAAE,QAAQ,CAAC,OAAO;AAC/D,SAAG,eAAe,UAAU,IAAI,oBAAoB;AAAA,IACtD,CAAC;AAED,2BAAuB,QAAQ,CAAC,WAAW;AACzC,YAAM,QAAQ,OAAO,aAAa,sBAAsB;AAExD,UAAI,CAAC;AAAO;AAEZ,YAAM,EAAE,QAAQ,IAAI,KAAK,MAAM,KAAK;AACpC,UAAI,SAAS;AACX,eAAO;AAAA,UACL;AAAA,UACA,2CAA2C,OAAO;AAAA,QACpD;AACA;AAAA,MACF;AAAA,IACF,CAAC;AAED,QACG;AAAA,MACC;AAAA,IACF,EACC,QAAQ,CAAC,OAAO;AACf,UAAI,GAAG,aAAa,SAAS,QAAK,MAAM;AAAO;AAE/C,SAAG,mBAAmB,aAAa,QAAK;AAAA,IAC1C,CAAC;AAEH,UAAM,OAAO,IAAI,cAAc,MAAM;AAErC,QAAI,MAAM;AACR,mBAAa,QAAQ,KAAK;AAAA,IAC5B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAY,2BAAwD;AAClE,WAAO;AAAA,MACL,WAAW,UAAU,KAAK,iBAAiB;AAAA,MAC3C,gBAAgB,UAAU,KAAK,iBAAiB;AAAA,IAClD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,iBAAiB,SAA0C;AACjE,QAAI,UAAmB,KAAK,cAAc,SAAS;AAEnD,QAAI,SAAS;AACX,UAAI;AACF,kBAAU,KAAK,MAAM,OAAO;AAAA,MAC9B,SAAS,GAAG;AAAA,MAAC;AAAA,IACf;AAEA,WAAO;AAAA,MACL,WAAW;AAAA,MACX,YAAY,KAAK,yBAAyB,OAAO,KAAK,UAAU;AAAA,MAChE,WAAW;AAAA,MACX;AAAA,MACA;AAAA,MACA,UAAU,CAAC,KAAK;AAAA,MAChB,aAAa;AAAA,QACX,YAAY,KAAK;AAAA,MACnB;AAAA,IACF;AAAA,EACF;AAAA,EAwCQ,wBAA8B;AACpC,QAAI,KAAK,UAAU;AAAM;AAEzB,SAAK,OAAO,GAAG,SAAS,KAAK,aAAa;AAC1C,SAAK,OAAO,GAAG,UAAU,KAAK,cAAc;AAC5C,SAAK,OAAO,GAAG,UAAU,KAAK,cAAc;AAC5C,SAAK,OAAO,GAAG,mBAAmB,KAAK,uBAAuB;AAC9D,SAAK,OAAO,GAAG,eAAe,KAAK,mBAAmB;AACtD,SAAK,OAAO,GAAG,QAAQ,KAAK,YAAY;AAAA,EAC1C;AAAA,EAEQ,0BAAgC;AACtC,QAAI,KAAK,UAAU;AAAM;AAEzB,SAAK,OAAO,IAAI,SAAS,KAAK,aAAa;AAC3C,SAAK,OAAO,IAAI,UAAU,KAAK,cAAc;AAC7C,SAAK,OAAO,IAAI,UAAU,KAAK,cAAc;AAC7C,SAAK,OAAO,IAAI,mBAAmB,KAAK,uBAAuB;AAC/D,SAAK,OAAO,IAAI,eAAe,KAAK,mBAAmB;AACvD,SAAK,OAAO,IAAI,QAAQ,KAAK,YAAY;AAAA,EAC3C;AAAA,EAEQ,cAAc,UAAmB,MAAc;AACrD,QAAI,CAAC,KAAK,cAAc,KAAK,eAAe,QAAQ;AAElD,WAAK,aAAa,KAAK,YAAY;AAAA,IACrC;AAEA,UAAM,SAAS,IAAI,OAAO,KAAK,WAAW,OAAO,CAAC;AAElD,WAAO;AAAA,EACT;AACF;AAAA;AAAA;AAAA;AAAA;AArwBa,iBAMJ,WAAW;",
  "names": []
}
