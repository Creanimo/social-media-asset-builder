{
  "version": 3,
  "sources": ["../../src/exports/attachment-upload.ts"],
  "sourcesContent": ["import { DirectUpload } from \"@rails/activestorage\";\nimport type { Blob, DirectUploadDelegate } from \"@rails/activestorage\";\nimport { AttachmentManager } from \"./attachment-manager.js\";\nimport { LOADING_STATES } from \"./elements/attachment-editor.js\";\n\n/**\n * An extension of DirectUpload. This is what handles uploading to remote sources\n *   for attachments.\n */\nexport class AttachmentUpload implements DirectUploadDelegate {\n  directUpload: DirectUpload;\n  attachment: AttachmentManager;\n  element: HTMLElement;\n  currentProgress = 0;\n\n  constructor(attachment: AttachmentManager, element: HTMLElement) {\n    this.attachment = attachment;\n    this.element = element;\n\n    if (this.attachment.file == null) throw \"No file found for direct upload\";\n\n    this.directUpload = new DirectUpload(\n      this.attachment.file,\n      this.directUploadUrl,\n      this,\n    );\n  }\n\n  start() {\n    this.directUpload.create(this.directUploadDidComplete.bind(this));\n  }\n\n  directUploadWillStoreFileWithXHR(xhr: XMLHttpRequest) {\n    xhr.upload.addEventListener(\"progress\", (event) => {\n      const progress = (event.loaded / event.total) * 100;\n      this.currentProgress = progress;\n      this.setUploadProgress();\n    });\n  }\n\n  directUploadDidComplete(\n    error: Error,\n    blob: Blob & { attachable_sgid?: string },\n  ) {\n    if (error) {\n      this.currentProgress = 0;\n      if (this.attachment.content == null) {\n        this.attachment.setNodeMarkup({\n          progress: 0,\n          loadingState: LOADING_STATES.error,\n        });\n      }\n\n      throw Error(`Direct upload failed: ${error}`);\n    }\n\n    this.attachment.setAttributes({\n      sgid: blob.attachable_sgid ?? \"\",\n      url: this.createBlobUrl(blob.signed_id, blob.filename),\n    });\n\n    this.currentProgress = 100;\n    this.setUploadProgress();\n  }\n\n  setUploadProgress() {\n    if (this.currentProgress >= 100) {\n      this.currentProgress = 100;\n      this.attachment.setUploadProgress(100);\n      return;\n    }\n\n    this.attachment.setUploadProgress(this.currentProgress);\n  }\n\n  createBlobUrl(signedId: string, filename: string) {\n    if (this.blobUrlTemplate == null) return \"\";\n\n    return this.blobUrlTemplate\n      .replace(\":signed_id\", signedId)\n      .replace(\":filename\", encodeURIComponent(filename));\n  }\n\n  get directUploadUrl() {\n    if (this.element.dataset.directUploadUrl == null) {\n      throw Error(\n        `No \"data-direct-upload-url\" attribute is set on ${this.element}`,\n      );\n    }\n    return this.element.dataset.directUploadUrl;\n  }\n\n  get blobUrlTemplate() {\n    return this.element.dataset.blobUrlTemplate;\n  }\n}\n"],
  "mappings": ";;;;;AAAA,SAAS,oBAAoB;AAStB,IAAM,mBAAN,MAAuD;AAAA,EAM5D,YAAY,YAA+B,SAAsB;AAFjE,2BAAkB;AAGhB,SAAK,aAAa;AAClB,SAAK,UAAU;AAEf,QAAI,KAAK,WAAW,QAAQ;AAAM,YAAM;AAExC,SAAK,eAAe,IAAI;AAAA,MACtB,KAAK,WAAW;AAAA,MAChB,KAAK;AAAA,MACL;AAAA,IACF;AAAA,EACF;AAAA,EAEA,QAAQ;AACN,SAAK,aAAa,OAAO,KAAK,wBAAwB,KAAK,IAAI,CAAC;AAAA,EAClE;AAAA,EAEA,iCAAiC,KAAqB;AACpD,QAAI,OAAO,iBAAiB,YAAY,CAAC,UAAU;AACjD,YAAM,WAAY,MAAM,SAAS,MAAM,QAAS;AAChD,WAAK,kBAAkB;AACvB,WAAK,kBAAkB;AAAA,IACzB,CAAC;AAAA,EACH;AAAA,EAEA,wBACE,OACA,MACA;AACA,QAAI,OAAO;AACT,WAAK,kBAAkB;AACvB,UAAI,KAAK,WAAW,WAAW,MAAM;AACnC,aAAK,WAAW,cAAc;AAAA,UAC5B,UAAU;AAAA,UACV,cAAc,eAAe;AAAA,QAC/B,CAAC;AAAA,MACH;AAEA,YAAM,MAAM,yBAAyB,KAAK,EAAE;AAAA,IAC9C;AAEA,SAAK,WAAW,cAAc;AAAA,MAC5B,MAAM,KAAK,mBAAmB;AAAA,MAC9B,KAAK,KAAK,cAAc,KAAK,WAAW,KAAK,QAAQ;AAAA,IACvD,CAAC;AAED,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AAAA,EACzB;AAAA,EAEA,oBAAoB;AAClB,QAAI,KAAK,mBAAmB,KAAK;AAC/B,WAAK,kBAAkB;AACvB,WAAK,WAAW,kBAAkB,GAAG;AACrC;AAAA,IACF;AAEA,SAAK,WAAW,kBAAkB,KAAK,eAAe;AAAA,EACxD;AAAA,EAEA,cAAc,UAAkB,UAAkB;AAChD,QAAI,KAAK,mBAAmB;AAAM,aAAO;AAEzC,WAAO,KAAK,gBACT,QAAQ,cAAc,QAAQ,EAC9B,QAAQ,aAAa,mBAAmB,QAAQ,CAAC;AAAA,EACtD;AAAA,EAEA,IAAI,kBAAkB;AACpB,QAAI,KAAK,QAAQ,QAAQ,mBAAmB,MAAM;AAChD,YAAM;AAAA,QACJ,mDAAmD,KAAK,OAAO;AAAA,MACjE;AAAA,IACF;AACA,WAAO,KAAK,QAAQ,QAAQ;AAAA,EAC9B;AAAA,EAEA,IAAI,kBAAkB;AACpB,WAAO,KAAK,QAAQ,QAAQ;AAAA,EAC9B;AACF;",
  "names": []
}
