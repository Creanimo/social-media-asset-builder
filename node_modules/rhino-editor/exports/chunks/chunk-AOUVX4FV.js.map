{
  "version": 3,
  "sources": ["../../src/exports/extensions/gallery.ts"],
  "sourcesContent": ["import { mergeAttributes, Node, selectionToInsertionEnd } from \"@tiptap/core\";\nimport { EditorState, Plugin, Transaction } from \"@tiptap/pm/state\";\nimport {\n  chainCommands,\n  createParagraphNear,\n  // liftEmptyBlock,\n  // newlineInCode,\n  // selectNodeForward,\n} from \"@tiptap/pm/commands\";\nimport { Node as ProseMirrorNode } from \"@tiptap/pm/model\";\nimport { findParentNodeOfTypeClosestToPos } from \"prosemirror-utils\";\nimport { figureTypes } from \"./attachment\";\n\nfunction replaceEmptyGalleryWithParagraph(\n  node: ProseMirrorNode,\n  tr: Transaction,\n  newState: EditorState,\n  pos: number,\n) {\n  let modified = false;\n\n  if (node.type.name != \"attachment-gallery\") return modified;\n\n  if (node.nodeSize === 2) {\n    tr.replaceWith(\n      pos,\n      pos + node.nodeSize,\n      newState.schema.node(\"paragraph\", null, []),\n    );\n    modified = true;\n  }\n\n  return modified;\n}\n\nexport interface GalleryOptions {\n  HTMLAttributes: Record<string, any>;\n}\n\nexport const Gallery = Node.create({\n  name: \"attachment-gallery\",\n  group: \"block\",\n  draggable: false,\n  selectable: false,\n  content: \"(paragraph | previewableAttachmentFigure)*\",\n\n  parseHTML() {\n    return [\n      {\n        tag: \"div.attachment-gallery\",\n      },\n    ];\n  },\n\n  renderHTML() {\n    return [\"div\", mergeAttributes({}, { class: \"attachment-gallery\" }), 0];\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        props: {\n          handleDOMEvents: {\n            keydown: (view, event) => {\n              if (event.key === \"Enter\") {\n                const nodeType = view.state.selection.$head.parent.type.name;\n                if (nodeType === \"attachment-gallery\") {\n                  event.preventDefault();\n\n                  chainCommands(createParagraphNear)(view.state, view.dispatch);\n                  return true;\n                }\n\n                if (figureTypes.includes(nodeType)) {\n                  event.preventDefault();\n\n                  chainCommands(createParagraphNear)(view.state, view.dispatch);\n\n                  const containingGallery = findParentNodeOfTypeClosestToPos(\n                    view.state.selection.$anchor,\n                    view.state.schema.nodes[\"attachment-gallery\"],\n                  );\n\n                  // TODO: Right now this just prevents us from splitting a gallery / figure.\n                  // Ideally, we should check `nodesBetween` and any `figures` get placed into a new gallery under the inserted paragraph like Trix does.\n                  if (containingGallery) {\n                    const tr = view.state.tr;\n                    tr.insert(\n                      containingGallery.pos + containingGallery.node.nodeSize,\n                      view.state.schema.nodes[\"paragraph\"].create(),\n                    );\n                    selectionToInsertionEnd(tr, tr.steps.length - 1, -1);\n\n                    view.dispatch(tr);\n                  }\n                  return true;\n                }\n              }\n\n              return false;\n            },\n          },\n        },\n        appendTransaction: (_transactions, _oldState, newState) => {\n          const tr = newState.tr;\n          let modified = false;\n\n          // @TODO: Iterate through transactions instead of descendants (?).\n          newState.doc.descendants((node, pos, _parent) => {\n            const mutations = [\n              replaceEmptyGalleryWithParagraph(node, tr, newState, pos),\n            ];\n\n            const shouldModify = mutations.some((bool) => bool === true);\n\n            if (shouldModify) {\n              modified = true;\n            }\n          });\n\n          if (modified) return tr;\n\n          return undefined;\n        },\n      }),\n    ];\n  },\n});\n"],
  "mappings": ";;;;;AAAA,SAAS,iBAAiB,MAAM,+BAA+B;AAC/D,SAAsB,cAA2B;AACjD;AAAA,EACE;AAAA,EACA;AAAA,OAIK;AAEP,SAAS,wCAAwC;AAGjD,SAAS,iCACP,MACA,IACA,UACA,KACA;AACA,MAAI,WAAW;AAEf,MAAI,KAAK,KAAK,QAAQ;AAAsB,WAAO;AAEnD,MAAI,KAAK,aAAa,GAAG;AACvB,OAAG;AAAA,MACD;AAAA,MACA,MAAM,KAAK;AAAA,MACX,SAAS,OAAO,KAAK,aAAa,MAAM,CAAC,CAAC;AAAA,IAC5C;AACA,eAAW;AAAA,EACb;AAEA,SAAO;AACT;AAMO,IAAM,UAAU,KAAK,OAAO;AAAA,EACjC,MAAM;AAAA,EACN,OAAO;AAAA,EACP,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EAET,YAAY;AACV,WAAO;AAAA,MACL;AAAA,QACE,KAAK;AAAA,MACP;AAAA,IACF;AAAA,EACF;AAAA,EAEA,aAAa;AACX,WAAO,CAAC,OAAO,gBAAgB,CAAC,GAAG,EAAE,OAAO,qBAAqB,CAAC,GAAG,CAAC;AAAA,EACxE;AAAA,EAEA,wBAAwB;AACtB,WAAO;AAAA,MACL,IAAI,OAAO;AAAA,QACT,OAAO;AAAA,UACL,iBAAiB;AAAA,YACf,SAAS,CAAC,MAAM,UAAU;AACxB,kBAAI,MAAM,QAAQ,SAAS;AACzB,sBAAM,WAAW,KAAK,MAAM,UAAU,MAAM,OAAO,KAAK;AACxD,oBAAI,aAAa,sBAAsB;AACrC,wBAAM,eAAe;AAErB,gCAAc,mBAAmB,EAAE,KAAK,OAAO,KAAK,QAAQ;AAC5D,yBAAO;AAAA,gBACT;AAEA,oBAAI,YAAY,SAAS,QAAQ,GAAG;AAClC,wBAAM,eAAe;AAErB,gCAAc,mBAAmB,EAAE,KAAK,OAAO,KAAK,QAAQ;AAE5D,wBAAM,oBAAoB;AAAA,oBACxB,KAAK,MAAM,UAAU;AAAA,oBACrB,KAAK,MAAM,OAAO,MAAM,oBAAoB;AAAA,kBAC9C;AAIA,sBAAI,mBAAmB;AACrB,0BAAM,KAAK,KAAK,MAAM;AACtB,uBAAG;AAAA,sBACD,kBAAkB,MAAM,kBAAkB,KAAK;AAAA,sBAC/C,KAAK,MAAM,OAAO,MAAM,WAAW,EAAE,OAAO;AAAA,oBAC9C;AACA,4CAAwB,IAAI,GAAG,MAAM,SAAS,GAAG,EAAE;AAEnD,yBAAK,SAAS,EAAE;AAAA,kBAClB;AACA,yBAAO;AAAA,gBACT;AAAA,cACF;AAEA,qBAAO;AAAA,YACT;AAAA,UACF;AAAA,QACF;AAAA,QACA,mBAAmB,CAAC,eAAe,WAAW,aAAa;AACzD,gBAAM,KAAK,SAAS;AACpB,cAAI,WAAW;AAGf,mBAAS,IAAI,YAAY,CAAC,MAAM,KAAK,YAAY;AAC/C,kBAAM,YAAY;AAAA,cAChB,iCAAiC,MAAM,IAAI,UAAU,GAAG;AAAA,YAC1D;AAEA,kBAAM,eAAe,UAAU,KAAK,CAAC,SAAS,SAAS,IAAI;AAE3D,gBAAI,cAAc;AAChB,yBAAW;AAAA,YACb;AAAA,UACF,CAAC;AAED,cAAI;AAAU,mBAAO;AAErB,iBAAO;AAAA,QACT;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AACF,CAAC;",
  "names": []
}
