{
  "version": 3,
  "sources": ["../../../src/internal/uuidv4.ts", "../../../src/internal/to-default-caption.ts", "../../../src/exports/attachment-manager.ts"],
  "sourcesContent": ["/** uuid generator for attaching unique ids to attachments that need uploading. */\nexport function uuidv4(): string {\n  // @ts-expect-error\n  const crypto = window.crypto || window.msCrypto;\n  // @ts-expect-error\n  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c: any) =>\n    (\n      c ^\n      (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))\n    ).toString(16),\n  );\n}\n", "import type { Maybe } from \"../types.js\";\nimport { toMemorySize } from \"./to-memory-size.js\";\n\ninterface CaptionParams {\n  fileName?: Maybe<string>;\n  fileSize?: Maybe<string | number>;\n}\n\nexport function toDefaultCaption({\n  fileName,\n  fileSize,\n}: CaptionParams): string {\n  if (!fileName || !fileSize) {\n    return \"\";\n  }\n\n  return `${fileName} \u00B7 ${toMemorySize(Number(fileSize))}`;\n}\n", "import { Maybe } from \"../types.js\";\nimport { uuidv4 } from \"../internal/uuidv4.js\";\nimport { EditorView } from \"@tiptap/pm/view\";\nimport { LOADING_STATES } from \"./elements/attachment-editor.js\";\nimport { toDefaultCaption } from \"../internal/to-default-caption.js\";\n\nexport interface AttachmentManagerAttributes {\n  src: string;\n\n  file?: Maybe<File>;\n\n  attachmentId?: Maybe<string>;\n  imageId?: Maybe<string>;\n  sgid?: Maybe<string>;\n  contentType?: Maybe<string>;\n  fileName?: Maybe<string>;\n  fileSize?: Maybe<number>;\n  content?: Maybe<string>;\n  caption?: Maybe<string>;\n  url?: Maybe<string>;\n  width?: Maybe<number>;\n  height?: Maybe<number>;\n  previewable?: Maybe<boolean>;\n}\n\n/**\n * An attachment manager that matches the interface of Trix's attachment manager.\n *   This is what gets built on \"rhino-attachment-add\"\n */\nexport class AttachmentManager implements AttachmentManagerAttributes {\n  attributes: AttachmentManagerAttributes;\n  editorView: EditorView;\n\n  static get previewableRegex() {\n    return /^image(\\/(gif|png|jpe?g)|$)/;\n  }\n\n  static isPreviewable(str: string) {\n    // (this || AttachmentManager) works around a strange bug in ESBuild v0.14.17 around how it transpiles static functions.\n    return (this || AttachmentManager).previewableRegex.test(str);\n  }\n\n  constructor(obj: AttachmentManagerAttributes, editorView: EditorView) {\n    this.editorView = editorView;\n    this.attributes = {\n      attachmentId: uuidv4(),\n      content: null,\n      imageId: uuidv4(),\n      sgid: null,\n      url: null,\n      ...obj,\n    };\n\n    this.attributes.previewable = this.isPreviewable;\n  }\n\n  setUploadProgress(progress: number): void {\n    if (this.content == null) {\n      this.setNodeMarkup({\n        progress,\n        loadingState:\n          progress >= 100 ? LOADING_STATES.success : LOADING_STATES.loading,\n      });\n    }\n  }\n\n  setAttributes(obj: Partial<AttachmentManagerAttributes>) {\n    this.attributes = Object.assign(this.attributes, obj);\n\n    /**\n     * These are the old Trix custom attachment APIs.\n     */\n    if (obj.content) {\n      this.setNodeMarkup({\n        sgid: this.attributes.sgid,\n        content: this.attributes.content,\n        previewable: this.isPreviewable,\n      });\n\n      return;\n    }\n\n    /**\n     * Sometimes we don't have a URL. We need that.\n     */\n    if (!obj.url) {\n      return;\n    }\n    if (this.isPreviewable) {\n      /** This preloads the image so we don't show a big flash. */\n      const image = new Image();\n\n      image.setAttribute(\"src\", obj.url);\n\n      image.onload = () => {\n        this.attributes.width = image.naturalWidth;\n        this.attributes.height = image.naturalHeight;\n\n        this.setNodeMarkup({\n          sgid: this.attributes.sgid,\n          url: this.attributes.url,\n          src: this.attributes.url,\n          href: this.attributes.url + \"?content-disposition=attachment\",\n          width: this.attributes.width,\n          height: this.attributes.height,\n          contentType: this.contentType,\n          previewable: this.isPreviewable,\n        });\n        image.remove();\n      };\n      return;\n    }\n\n    /**\n     * These are non-previewable assets like CSVs, Word docs, etc.\n     */\n    this.setNodeMarkup({\n      sgid: this.attributes.sgid,\n      url: this.attributes.url,\n      contentType: this.contentType,\n      previewable: this.isPreviewable,\n    });\n  }\n\n  /**\n   * Helper function to set the markup for an attachment. We map a uuid to the \"attachmentId\"\n   * of the TipTap node to guarantee we're targeting the right one.\n   */\n  setNodeMarkup(obj: Record<string, unknown>) {\n    const view = this.editorView;\n\n    if (view == null) return;\n\n    view.state.doc.descendants((descendantNode, position: number) => {\n      if (descendantNode.attrs.attachmentId === this.attachmentId) {\n        view.dispatch(\n          view.state.tr.setNodeMarkup(position, undefined, {\n            ...descendantNode.attrs,\n            ...obj,\n          }),\n        );\n      }\n    });\n  }\n\n  /**\n   * This is an internal ID used for finding newly attached attachments in the TipTap editor.\n   * This is used primarily for direct upload purposes.\n   * This generally won't exist when a node is recreated from you database.\n   */\n  get attachmentId() {\n    return this.attributes.attachmentId;\n  }\n\n  /**\n   * This is an internal ID used for finding newly attached images in the TipTap editor.\n   * This is used primarily for direct upload purposes.\n   * This generally won't exist when a node is recreated from you database.\n   */\n  get imageId() {\n    return this.attributes.imageId;\n  }\n\n  /**\n   * `src` (when present) always maps to a URL.createObjectURL.\n   */\n  get src() {\n    return this.attributes.src;\n  }\n\n  set src(val: string) {\n    this.attributes.src = val;\n  }\n\n  get sgid() {\n    return this.attributes.sgid;\n  }\n\n  get file() {\n    return this.attributes.file;\n  }\n\n  get contentType() {\n    return this.attributes.contentType || this.file?.type;\n  }\n\n  get fileName() {\n    return this.attributes.fileName || this.file?.name;\n  }\n\n  get fileSize() {\n    return this.attributes.fileSize || this.file?.size;\n  }\n\n  /**\n   * This field is populated by the old Trix custom attachment API and denotes if we're using a custom\n   * attachment.\n   */\n  get content() {\n    return this.attributes.content;\n  }\n\n  set content(val: Maybe<string>) {\n    this.attributes.content = val;\n  }\n\n  get height() {\n    return this.attributes.height;\n  }\n\n  get width() {\n    return this.attributes.width;\n  }\n\n  get isPreviewable() {\n    const isPreviewable = (\n      this.constructor as unknown as typeof AttachmentManager\n    ).isPreviewable;\n\n    const contentType = this.contentType;\n\n    return isPreviewable(contentType || \"\");\n  }\n\n  get caption() {\n    const defaultCaption = toDefaultCaption({\n      fileName: this.attributes.fileName,\n      fileSize: this.attributes.fileSize,\n    });\n    // We want to set a real caption for non-previewable assets to prevent them from getting cleared out.\n    if (this.isPreviewable) {\n      return defaultCaption;\n    }\n\n    return this.attributes.caption || defaultCaption || \"\";\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
